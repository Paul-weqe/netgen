#!/usr/bin/env ruby
#$VERBOSE = true

require 'bundler/setup'
require 'optparse'
require 'yaml'
require 'fileutils'
require 'netgen'

# signal handler
trap(:INT) do
  exit(0)
end

config_file = 'config.yml'
script = nil

opts = OptionParser.new do |op|
  op.banner = "netgen - the swiss army knife of network simulation.\n\n"\
              "Usage: #{__FILE__} [OPTIONS] topology.yml"
  op.separator 'Help menu:'
  op.on('-c', '--config FILE', 'Set configuration file name') do |arg|
    config_file = arg
  end
  op.on('-d', '--debug', 'Enable debugging mode') do
    Netgen.debug_mode = 1
  end
  op.on('-h', '--help', 'Display this help and exit') do
    puts opts
    exit 0
  end
  op.on('-o', '--output FILE', 'Save auto-generated topology') do |arg|
    Netgen.output = arg
  end
  op.on('-s', '--script FILE', 'Run custom script after topology is started and exit') do |arg|
    script = arg
  end
  op.on('-v', '--version', 'Print program version') do
    puts "netgen v#{Netgen::VERSION}"
    exit 0
  end
  op.separator ''
  op.separator 'Example:'
  op.separator "    #{File.basename(__FILE__)} examples/frr-isis-tutorial.yml"
  op.separator ''
end

# Main
begin
  opts.parse!
rescue OptionParser::ParseError => e
  $stderr.puts e.message
  $stderr.puts e.backtrace
  exit(1)
end
if ARGV.size != 1
  puts opts.help
  exit(1)
end
topology_file = ARGV[0]

Netgen::LibC.prctl(Netgen::LibC::PR_SET_CHILD_SUBREAPER, 1, 0, 0, 0)

Netgen.config = Netgen::Config.new(config_file)
Netgen.topology = Netgen::Topology.new(topology_file)
Netgen.topology.check_consistency
Netgen.topology.setup
Netgen.topology.start

if script
  system(script)
  Netgen.topology.cleanup
  exit
end

at_exit do
  Netgen.topology.cleanup
  puts 'exiting'
end

# main loop
# TODO CLI
sleep
